using BinaryProvider

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libz"], :libz),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/bicycle1885/ZlibBuilder/releases/download/v1.0.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    #BinaryProvider.Linux(:aarch64, :glibc, :blank_abi) => ("$bin_prefix/Zlib.aarch64-linux-gnu.tar.gz", "f5ad5b4390ddd6d6a96cc573b5b6aadce31977698355658f03a62351f02f8e2d"),
    #BinaryProvider.UnknownPlatform() => ("$bin_prefix/Zlib.arm-linux-gnueabihf.tar.gz", "ea00d81a87aa1159348ae570f17398eb5fb6ffea1c8e97751cb4aa5db2e00acf"),
    #BinaryProvider.Linux(:i686, :glibc, :blank_abi) => ("$bin_prefix/Zlib.i686-linux-gnu.tar.gz", "20afcaf2536f43b35814d56bd8a26cd39b068ffe1a513c21dc61d600ef8b4bee"),
    #BinaryProvider.Windows(:i686, :blank_libc, :blank_abi) => ("$bin_prefix/Zlib.i686-w64-mingw32.tar.gz", "1b85dc6e98e7677b63e6cf7ce97718e892cfdd858b7a210b723ce1b5c86e48d7"),
    #BinaryProvider.MacOS(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Zlib.x86_64-apple-darwin14.tar.gz", "924f13195b3b95c4d23f3828ecb6ae3b1c8f3a1c4d5372a13090cff4e7ed1c4a"),
    #BinaryProvider.Linux(:x86_64, :glibc, :blank_abi) => ("$bin_prefix/Zlib.x86_64-linux-gnu.tar.gz", "769aee697443ef7111bab843df304f50eedd671006fad9f49913abed0dbac64b"),
    #BinaryProvider.Windows(:x86_64, :blank_libc, :blank_abi) => ("$bin_prefix/Zlib.x86_64-w64-mingw32.tar.gz", "4479f1b7559227767e305520efe077f575b3edc7cb59235dbdca33e09a756ed1"),
    BinaryProvider.Linux(:aarch64, :glibc) => ("$bin_prefix/Zlib.aarch64-linux-gnu.tar.gz", "f5ad5b4390ddd6d6a96cc573b5b6aadce31977698355658f03a62351f02f8e2d"),
    BinaryProvider.Linux(:i686, :glibc) => ("$bin_prefix/Zlib.i686-linux-gnu.tar.gz", "20afcaf2536f43b35814d56bd8a26cd39b068ffe1a513c21dc61d600ef8b4bee"),
    BinaryProvider.Windows(:i686) => ("$bin_prefix/Zlib.i686-w64-mingw32.tar.gz", "1b85dc6e98e7677b63e6cf7ce97718e892cfdd858b7a210b723ce1b5c86e48d7"),
    BinaryProvider.MacOS(:x86_64) => ("$bin_prefix/Zlib.x86_64-apple-darwin14.tar.gz", "924f13195b3b95c4d23f3828ecb6ae3b1c8f3a1c4d5372a13090cff4e7ed1c4a"),
    BinaryProvider.Linux(:x86_64, :glibc) => ("$bin_prefix/Zlib.x86_64-linux-gnu.tar.gz", "769aee697443ef7111bab843df304f50eedd671006fad9f49913abed0dbac64b"),
    BinaryProvider.Windows(:x86_64) => ("$bin_prefix/Zlib.x86_64-w64-mingw32.tar.gz", "4479f1b7559227767e305520efe077f575b3edc7cb59235dbdca33e09a756ed1"),
)

# First, check to see if we're all satisfied
if any(!satisfied(p; verbose=verbose) for p in products)
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    else
        # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something more even more ambitious here.
        error("Your platform $(triplet(platform_key())) is not supported by this package!")
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
