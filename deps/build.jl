using BinaryProvider
using Compat
using Compat.Libdl

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libz"], :libz),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/bicycle1885/ZlibBuilder/releases/download/v1.0.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/Zlib.v1.2.11.aarch64-linux-gnu.tar.gz", "37de2156c3c7e71cf7a913726eaae493239bcd65e5b42a84008298d8d418122a"),
    Linux(:aarch64, :musl) => ("$bin_prefix/Zlib.v1.2.11.aarch64-linux-musl.tar.gz", "4eaed05355abc53edfda7add75db1b37508a6bfc7c7612f6a622435ab6e2376e"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/Zlib.v1.2.11.arm-linux-gnueabihf.tar.gz", "f08efe363ec8d1cd683a0ede7e1a9b7f8fc9104b02f345fa0134c41f8ed6b858"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/Zlib.v1.2.11.arm-linux-musleabihf.tar.gz", "480406c4ad864d6fc469a68e7f64fed8650de31c7330bb0ab2969eea22c26157"),
    Linux(:i686, :glibc) => ("$bin_prefix/Zlib.v1.2.11.i686-linux-gnu.tar.gz", "8d0b2e36823e3ef9ad5a37d7adc629cb2fd1d64c4d5173237c27523e2d01fa48"),
    Linux(:i686, :musl) => ("$bin_prefix/Zlib.v1.2.11.i686-linux-musl.tar.gz", "23cf414f24a7138b8c4b77d54750a371eda340cda3f91bf081643335de4a44b2"),
    Windows(:i686) => ("$bin_prefix/Zlib.v1.2.11.i686-w64-mingw32.tar.gz", "a58cc5df045f50caaf16bb9e393f5549fb6498471a04e5c55659425936243e0a"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/Zlib.v1.2.11.powerpc64le-linux-gnu.tar.gz", "1ac9ceeaf2512734d04848a6fb45ba40213e5ea7d2b7d33b72bfda879e1c69bd"),
    MacOS(:x86_64) => ("$bin_prefix/Zlib.v1.2.11.x86_64-apple-darwin14.tar.gz", "c923f866a0770cf2165d1b18b6e301b3d01a875401a7801ddc9deba86759ca7b"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/Zlib.v1.2.11.x86_64-linux-gnu.tar.gz", "2b081904e33195cd24e40639c3fa1b3e70284d86f267710343941083bedaf610"),
    Linux(:x86_64, :musl) => ("$bin_prefix/Zlib.v1.2.11.x86_64-linux-musl.tar.gz", "a782fb42c612576cffbc448cc8b17aa888592e1419b5e3713e6e0a9859ebbb36"),
    FreeBSD(:x86_64) => ("$bin_prefix/Zlib.v1.2.11.x86_64-unknown-freebsd11.1.tar.gz", "e035a82177cad715e819c08f888538db4ddb0589a13292cb18e9a69a220a7028"),
    Windows(:x86_64) => ("$bin_prefix/Zlib.v1.2.11.x86_64-w64-mingw32.tar.gz", "34cfc00b28c3883d007e642c4518cba3ba4244bcced25101e3f15168e1a898d7"),
)

# A simple source build fallback for platforms not supported by BinaryBuilder
# Assumes that tar, GNU make, and a C compiler are available
function sourcebuild()
    srcdir = joinpath(@__DIR__, "src")
    libdir = joinpath(@__DIR__, "lib")
    z = "zlib-1.2.11"
    for d = [srcdir, libdir]
        isdir(d) && rm(d, force=true, recursive=true)
        mkpath(d)
    end
    download("https://zlib.net/$(z).tar.gz", joinpath(srcdir, "$(z).tar.gz"))
    cd(srcdir) do
        run(`tar xzf $(z).tar.gz`)
    end
    cd(joinpath(srcdir, z)) do
        run(`./configure --prefix=.`)
        make = Compat.Sys.isbsd() ? `gmake` : `make`
        run(`$make -j$(Sys.CPU_CORES)`)
    end
    found = false
    for f in readdir(joinpath(srcdir, z))
        if startswith(f, "libz." * Libdl.dlext)
            found = true
            Compat.cp(joinpath(srcdir, z, f), joinpath(libdir, f), force=true)
        end
    end
    found || error("zlib was unable to build properly")
    libz = joinpath(libdir, "libz." * Libdl.dlext)
    open(joinpath(@__DIR__, "deps.jl"), "w") do io
        println(io, """
            using Compat
            using Compat.Libdl
            function check_deps()
                ptr = Libdl.dlopen_e("$libz")
                loaded = ptr != C_NULL
                Libdl.dlclose(ptr)
                if !loaded
                    error("Unable to load zlib from $libz. Please rerun " *
                          "`Pkg.build(\\"CodecZlib\\")` and restart Julia.")
                end
            end
            const libz = "$libz"
            """)
    end
end

dobuild = try
    key = platform_key() # This can error on older BinaryProvider versions (<=0.2.5)
    isdefined(BinaryProvider, :UnknownPlatform) && key == UnknownPlatform()
catch
    true
end

if dobuild
    sourcebuild()
elseif any(!satisfied(p; verbose=verbose) for p in products)
    # Check to see if we're all satisfied
    if haskey(download_info, platform_key())
        # Download and install binaries
        url, tarball_hash = download_info[platform_key()]
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
# This is already done if we've built from source
dobuild || write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
